version: '3'

services:
  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    restart: always
    tty: true
    working_dir: /var/www
    volumes:
      - ./php/app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./start.sh:/var/www/start.sh
    environment:
      CONTAINER_TYPE: app
    entrypoint: [ "sh", "start.sh" ]
    depends_on:
      - mysql
      - redis
    networks:
      - internal-network
  scheduler-worker:
    build:
      context: ./php
      dockerfile: Dockerfile
    restart: always
    tty: true
    working_dir: /var/www
    volumes:
      - ./php/app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./start.sh:/var/www/start.sh
    environment:
      CONTAINER_TYPE: scheduler
    entrypoint: [ "sh", "start.sh" ]
    depends_on:
      - mysql
      - redis
    networks:
      - internal-network
  request-worker:
    build:
      context: ./php
      dockerfile: Dockerfile
    restart: always
    tty: true
    working_dir: /var/www
    volumes:
      - ./php/app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./start.sh:/var/www/start.sh
    environment:
      CONTAINER_TYPE: request
    entrypoint: [ "sh", "start.sh" ]
    depends_on:
      - mysql
      - redis
    networks:
      - internal-network
      - stock-network # external network
  emails-worker:
    build:
      context: ./php
      dockerfile: Dockerfile
    restart: always
    tty: true
    working_dir: /var/www
    volumes:
      - ./php/app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./start.sh:/var/www/start.sh
    environment:
      CONTAINER_TYPE: emails
    entrypoint: [ "sh", "start.sh" ]
    depends_on:
      - mysql
      - redis
    networks:
      - internal-network
  simulation-worker:
    build:
      context: ./php
      dockerfile: Dockerfile
    restart: always
    tty: true
    working_dir: /var/www
    volumes:
      - ./php/app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./start.sh:/var/www/start.sh
    environment:
      CONTAINER_TYPE: simulation
    entrypoint: [ "sh", "start.sh" ]
    depends_on:
      - mysql
      - redis
    networks:
      - internal-network
  websocket:
    build:
      context: ./php
      dockerfile: Dockerfile
    restart: always
    tty: true
    working_dir: /var/www
    volumes:
      - ./php/app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./start.sh:/var/www/start.sh
    environment:
      CONTAINER_TYPE: websocket
    entrypoint: [ "sh", "start.sh" ]
    depends_on:
      - php
      - redis
    networks:
      - internal-network
  node:
    build:
      context: ./node
      dockerfile: Dockerfile
    restart: always
    tty: true
    # ports:
    #   - "3000:3000"
    networks:
      - internal-network
  laravel-echo-server:
    build:
      context: ./laravel-echo-server
      dockerfile: Dockerfile
    restart: always
    tty: true
    # ports:
    #   - "6001:6001"
    depends_on:
      - redis
    networks:
      - internal-network
  nginx:
    image: nginx:latest
    restart: always
    tty: true
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
      - ./nginx/.ssh:/ssh
    depends_on:
      - php
      - node
    networks:
      - internal-network
      - traefik-network
    labels:
      - "traefik.enable=true"
      # open tls and use websecure entrypoint
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.rule=Host(`${HOST}`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
  redis:
    image: redis:latest
    restart: always
    tty: true
    # ports:
    #   - "6379:6379"
    volumes:
      - ./redis:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - internal-network
  mysql:
    image: mysql:8.0.35
    restart: always
    tty: true
    # ports:
    #   - "3306:3306"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./mysql:/var/lib/mysql
    networks:
      - internal-network

networks:
  internal-network:
    driver: bridge
  stock-network:
    external: true
  traefik-network:
    external: true
